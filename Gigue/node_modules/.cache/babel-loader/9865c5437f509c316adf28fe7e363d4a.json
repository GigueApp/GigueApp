{"ast":null,"code":"var _jsxFileName = \"/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Landing.js\";\nimport { Redirect, NavLink, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport Events from \"./Events\";\n\nclass Landing extends React.Component {\n  constructor(props) {\n    super(props); // value: name of city user entered\n\n    /* toEvents: default value is false. when user hits submit button on landing page, the onClick attribute\n                 calls the handleSubmit function, which switches 'toEvents' to true, meaning 'the user wants to \n                 be routed to the Events page.' Then, when Landing returns, if toEvents is true, it redirects to\n                 the events page instead of rendering the Landing page\n    */\n\n    this.state = {\n      value: \"\",\n      toEvents: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeZip = this.handleChangeZip.bind(this);\n  }\n\n  handleChangeZip(e) {\n    this.props.zip = e.target.value;\n  } // Function called when a user hits submit from the landing page. this.state.value is the city they entered\n\n\n  handleSubmit(event) {\n    // set state \"toEvents\" to true\n    this.setState(() => ({\n      toEvents: true\n    })); // any code written after this is going to get called BEFORE the Events page is rendered.\n    // this.state.value is the name of the city the user typed in\n\n    this.handleChangeZip(event);\n    event.preventDefault();\n  }\n\n  render() {\n    if (this.state.toEvents === true) {\n      return React.createElement(Redirect, {\n        to: \"/Events\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-question\",\n      id: \"thisfontonly\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"What city are you looking for?\"), React.createElement(\"div\", {\n      className: \"textbar-and-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleChangeZip,\n      value: this.props.zip,\n      type: \"text\",\n      name: \"city\",\n      id: \"citylabel\",\n      style: {\n        fontSize: \"24pt\"\n      },\n      className: \"rcorners\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onClick: this.handleSubmit,\n      type: \"submit\",\n      name: \"submit\",\n      value: \"Go!\",\n      id: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Landing;","map":{"version":3,"sources":["/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Landing.js"],"names":["Redirect","NavLink","Link","React","Events","Landing","Component","constructor","props","state","value","toEvents","handleSubmit","bind","handleChangeZip","e","zip","target","event","setState","preventDefault","render","fontSize"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,IAA5B,QAAwC,kBAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA;;;;;;AAKA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KAAb;AAEA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDC,EAAAA,eAAe,CAACC,CAAD,EAAI;AACjB,SAAKP,KAAL,CAAWQ,GAAX,GAAiBD,CAAC,CAACE,MAAF,CAASP,KAA1B;AACD,GAjBmC,CAmBpC;;;AACAE,EAAAA,YAAY,CAACM,KAAD,EAAQ;AAClB;AACA,SAAKC,QAAL,CAAc,OAAO;AACnBR,MAAAA,QAAQ,EAAE;AADS,KAAP,CAAd,EAFkB,CAMlB;AACA;;AACA,SAAKG,eAAL,CAAqBI,KAArB;AACAA,IAAAA,KAAK,CAACE,cAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKZ,KAAL,CAAWE,QAAX,KAAwB,IAA5B,EAAkC;AAChC,aAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,EAAE,EAAC,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAIE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,QAAQ,EAAE,KAAKG,eADjB;AAEE,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWQ,GAFpB;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,EAAE,EAAC,WALL;AAME,MAAA,KAAK,EAAE;AAAEM,QAAAA,QAAQ,EAAE;AAAZ,OANT;AAOE,MAAA,SAAS,EAAC,UAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAUE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,OAAO,EAAE,KAAKV,YADhB;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,KAAK,EAAC,KAJR;AAKE,MAAA,EAAE,EAAC,QALL;AAME,MAAA,SAAS,EAAC,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CAJF,CADF,CADF;AA8BD;;AAnEmC;;AAsEtC,eAAeP,OAAf","sourcesContent":["import { Redirect, NavLink, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport Events from \"./Events\";\n\nclass Landing extends React.Component {\n  constructor(props) {\n    super(props);\n    // value: name of city user entered\n    /* toEvents: default value is false. when user hits submit button on landing page, the onClick attribute\n                 calls the handleSubmit function, which switches 'toEvents' to true, meaning 'the user wants to \n                 be routed to the Events page.' Then, when Landing returns, if toEvents is true, it redirects to\n                 the events page instead of rendering the Landing page\n    */\n    this.state = { value: \"\", toEvents: false };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeZip = this.handleChangeZip.bind(this);\n  }\n\n  handleChangeZip(e) {\n    this.props.zip = e.target.value;\n  }\n\n  // Function called when a user hits submit from the landing page. this.state.value is the city they entered\n  handleSubmit(event) {\n    // set state \"toEvents\" to true\n    this.setState(() => ({\n      toEvents: true\n    }));\n\n    // any code written after this is going to get called BEFORE the Events page is rendered.\n    // this.state.value is the name of the city the user typed in\n    this.handleChangeZip(event);\n    event.preventDefault();\n  }\n\n  render() {\n    if (this.state.toEvents === true) {\n      return <Redirect to=\"/Events\" />;\n    }\n\n    return (\n      <div>\n        <div className=\"main-body\">\n          <div className=\"main-question\" id=\"thisfontonly\">\n            What city are you looking for?\n          </div>\n          <div className=\"textbar-and-button\">\n            <input\n              onChange={this.handleChangeZip}\n              value={this.props.zip}\n              type=\"text\"\n              name=\"city\"\n              id=\"citylabel\"\n              style={{ fontSize: \"24pt\" }}\n              className=\"rcorners\"\n            />\n            <div className=\"buttons\">\n              <input\n                onClick={this.handleSubmit}\n                type=\"submit\"\n                name=\"submit\"\n                value=\"Go!\"\n                id=\"submit\"\n                className=\"button\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n"]},"metadata":{},"sourceType":"module"}