{"ast":null,"code":"var _jsxFileName = \"/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Events.js\";\n\n/* page for loading events on bootstrap cards */\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport EventCard from \"./EventCard\";\nimport ReactLoading from \"react-loading\";\n\nclass Events extends React.Component {\n  componentWillMount() {\n    const googleUrl = 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + this.props.zip + '&key=AIzaSyBNWms-eVzSQmo6leT8Re4yBrpmC9tx-h0';\n    fetch(googleUrl).then(result => result.json()).then(result => {\n      console.log(result);\n      return result.results;\n    }).then(result => {\n      return result[0].geometry.location;\n    }).then(result => {\n      const lat = result.lat.toFixed(2);\n      const long = result.lng.toFixed(2);\n      const songkickAreaUrl = 'https://api.songkick.com/api/3.0/search/locations.json?location=geo:' + lat + ',' + long + '&apikey=nD4GefUecMO1Dzwh';\n      console.log(songkickAreaUrl);\n      return songkickAreaUrl;\n    }).then(url => {\n      fetch(url).then(result => result.json()).then(result => result.resultsPage.results).then(result => {\n        const metroAreaId = result.location[0].metroArea.id;\n        const songkickEventsUrl = 'https://api.songkick.com/api/3.0/metro_areas/' + metroAreaId + '/calendar.json?apikey=nD4GefUecMO1Dzwh';\n        console.log(songkickEventsUrl);\n        return songkickEventsUrl;\n      }).then(url => {\n        fetch(url).then(response => response.json()).then(data => {\n          console.log(data);\n          console.log(data.resultsPage.results.event);\n          return data.resultsPage.results.event;\n        }).then(data => {\n          const eventsQueried = data.map(x => {\n            let obj = {};\n            obj['EventName'] = x.displayName;\n            obj[\"Uri\"] = x.uri;\n            obj[\"Venue\"] = x.venue.displayName;\n            obj[\"StartDate\"] = x.start.date;\n            obj[\"Location\"] = x.location.city;\n            obj[\"Headliners\"] = x.performance.filter(artist => {\n              if (artist.billing == \"headline\") {\n                return artist.displayName;\n              }\n            });\n            obj[\"SupportArtists\"] = x.performance.filter(artist => {\n              if (artist.billing != \"headline\") {\n                return artist.displayName;\n              }\n            });\n            return obj;\n          });\n          console.log(eventsQueried);\n          return eventsQueried;\n        }).then(results => {\n          this.setState({\n            events: results,\n            done: true\n          });\n        });\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      done: undefined\n    };\n  }\n\n  handleChange(e) {\n    this.props.onZipChange(e.target.value);\n  } // below I added a link back to the landing page, just to make our lives easier while testing\n  // we'll remove it when we actually build the events page, since users won't need to go back to\n  // the landing page\n\n\n  render() {\n    const thisZip = this.props.zip;\n    const {\n      events\n    } = this.state; //<EventCard eventsData={events} />\n    //<div className=\"eventsPage\">Zip entered was: {thisZip}</div>\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, !this.state.done ? React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(ReactLoading, {\n      type: \"bars\",\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })) : React.createElement(EventCard, {\n      eventsData: events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Home\")))));\n  }\n\n}\n\nexport default Events;","map":{"version":3,"sources":["/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Events.js"],"names":["React","NavLink","EventCard","ReactLoading","Events","Component","componentWillMount","googleUrl","props","zip","fetch","then","result","json","console","log","results","geometry","location","lat","toFixed","long","lng","songkickAreaUrl","url","resultsPage","metroAreaId","metroArea","id","songkickEventsUrl","response","data","event","eventsQueried","map","x","obj","displayName","uri","venue","start","date","city","performance","filter","artist","billing","setState","events","done","catch","error","constructor","state","handleChange","bind","undefined","e","onZipChange","target","value","render","thisZip"],"mappings":"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","sourcesContent":["/* page for loading events on bootstrap cards */\n\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport EventCard from \"./EventCard\";\nimport ReactLoading from \"react-loading\";\n\nclass Events extends React.Component {\n  state = {\n    events: []\n  };\n\n  componentWillMount() {\n    const googleUrl = 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + this.props.zip + '&key=AIzaSyBNWms-eVzSQmo6leT8Re4yBrpmC9tx-h0'\n    fetch(googleUrl)\n      .then(result => result.json())\n      .then(result => {\n        console.log(result);\n        return result.results;\n      })\n      .then(result => {\n        return result[0].geometry.location;\n      })\n      .then(result => {\n        const lat = result.lat.toFixed(2);\n        const long = result.lng.toFixed(2);\n        const songkickAreaUrl = 'https://api.songkick.com/api/3.0/search/locations.json?location=geo:' + lat + ',' + long + '&apikey=nD4GefUecMO1Dzwh'\n        console.log(songkickAreaUrl);\n        return songkickAreaUrl;\n      })\n      .then(url => {\n        fetch(url)\n          .then(result => result.json())\n          .then(result => result.resultsPage.results)\n          .then(result => {\n            const metroAreaId = result.location[0].metroArea.id;\n            const songkickEventsUrl = 'https://api.songkick.com/api/3.0/metro_areas/' + metroAreaId + '/calendar.json?apikey=nD4GefUecMO1Dzwh';\n            console.log(songkickEventsUrl);\n            return songkickEventsUrl;\n          })\n          .then(url => {\n            fetch(url)\n            .then(response => response.json())\n            .then(data => {\n              console.log(data);\n              console.log(data.resultsPage.results.event);\n              return data.resultsPage.results.event;\n            })\n            .then(data => {\n              const eventsQueried = data.map(x => {\n                let obj = {};\n                obj['EventName'] = x.displayName;\n                obj[\"Uri\"] = x.uri;\n                obj[\"Venue\"] = x.venue.displayName;\n                obj[\"StartDate\"] = x.start.date;\n                obj[\"Location\"] = x.location.city;\n                obj[\"Headliners\"] = x.performance.filter(artist => {\n                  if(artist.billing == \"headline\"){\n                    return artist.displayName;\n                  }\n                })\n                obj[\"SupportArtists\"] = x.performance.filter(artist => {\n                  if(artist.billing != \"headline\"){\n                    return artist.displayName;\n                  }\n                })\n                \n                return obj;\n              \n              });\n              console.log(eventsQueried);\n              return eventsQueried;\n            })\n            .then(results => {\n              this.setState({\n                events: results,\n                done: true\n              })\n            })\n          })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n       \n  }\n\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      done: undefined\n   }\n  }\n\n  handleChange(e) {\n    this.props.onZipChange(e.target.value);\n  }\n\n  \n  // below I added a link back to the landing page, just to make our lives easier while testing\n  // we'll remove it when we actually build the events page, since users won't need to go back to\n  // the landing page\n  render() {\n    const thisZip = this.props.zip;\n    const { events } = this.state;\n    //<EventCard eventsData={events} />\n    //<div className=\"eventsPage\">Zip entered was: {thisZip}</div>\n    return (\n      <div>\n        \n       \n        {!this.state.done ? (\n          <div className=\"container\">\n            <ReactLoading type={\"bars\"} color={\"white\"} />\n          </div>\n         ) : (\n          <EventCard eventsData={events} />\n         )}\n        <div>\n          <ul>\n            <li>\n              <NavLink to=\"/\">Home</NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}