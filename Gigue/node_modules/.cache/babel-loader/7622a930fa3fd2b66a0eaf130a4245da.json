{"ast":null,"code":"var _jsxFileName = \"/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Events.js\";\n\n/* page for loading events on bootstrap cards */\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport EventCard from \"./EventCard\";\n\nclass Events extends React.Component {\n  componentWillMount() {\n    const googleUrl = 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + this.props.zip + '&key=AIzaSyBNWms-eVzSQmo6leT8Re4yBrpmC9tx-h0';\n    fetch(googleUrl).then(result => result.json()).then(result => {\n      console.log(result);\n      const songkickAreaUrl = 'https://api.songkick.com/api/3.0/search/locations.json?location=geo:45.52,-122.93&apikey=nD4GefUecMO1Dzwh'; //TODO:Need to actually grab location info from result\n\n      fetch(songkickAreaUrl).then(result => result.json()).then(result => {\n        console.log(result); //TODO: Actual grab area id from result, specify dates?\n\n        const songkickEventsUrl = 'https://api.songkick.com/api/3.0/metro_areas/12283/calendar.json?apikey=nD4GefUecMO1Dzwh';\n        fetch(songkickEventsUrl).then(response => response.json()).then(data => {\n          console.log(data);\n          console.log(data.resultsPage.results.event);\n          return data.resultsPage.results.event;\n        }).then(data => {\n          const eventsQueried = data.map(x => x.id); //TODO: Add more things here\n\n          /*\n          let obj ={};\n          obj['eventName'] = x.eventName;\n          //obj[uri] = x.uri;\n          obj['venue'] = x.venue.displayName;\n          obj['artists'] = x.performance.map(y => y.displayName); \n          x.id\n          */\n          //console.log(eventsQueried);\n\n          this.setState({\n            events: eventsQueried\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      });\n      /*this.setState({\n        events: result\n      });*/\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onZipChange(e.target.value);\n  } // below I added a link back to the landing page, just to make our lives easier while testing\n  // we'll remove it when we actually build the events page, since users won't need to go back to\n  // the landing page\n\n\n  render() {\n    const thisZip = this.props.zip;\n    const {\n      events\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(EventCard, {\n      eventsData: events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"eventsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Zip entered was: \", thisZip), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Home\")))));\n  }\n\n}\n\nexport default Events;","map":{"version":3,"sources":["/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Events.js"],"names":["React","NavLink","EventCard","Events","Component","componentWillMount","googleUrl","props","zip","fetch","then","result","json","console","log","songkickAreaUrl","songkickEventsUrl","response","data","resultsPage","results","event","eventsQueried","map","x","id","setState","events","catch","error","constructor","state","handleChange","bind","e","onZipChange","target","value","render","thisZip"],"mappings":"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","sourcesContent":["/* page for loading events on bootstrap cards */\n\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport EventCard from \"./EventCard\";\n\nclass Events extends React.Component {\n  state = {\n    events: []\n  };\n\n  componentWillMount() {\n    const googleUrl = 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + this.props.zip + '&key=AIzaSyBNWms-eVzSQmo6leT8Re4yBrpmC9tx-h0'\n    fetch(googleUrl)\n      .then(result => result.json())\n      .then(result => {\n        console.log(result);\n        const songkickAreaUrl = 'https://api.songkick.com/api/3.0/search/locations.json?location=geo:45.52,-122.93&apikey=nD4GefUecMO1Dzwh'\n        //TODO:Need to actually grab location info from result\n        fetch(songkickAreaUrl)\n          .then(result => result.json())\n          .then(result =>{\n            console.log(result);\n            //TODO: Actual grab area id from result, specify dates?\n            const songkickEventsUrl = 'https://api.songkick.com/api/3.0/metro_areas/12283/calendar.json?apikey=nD4GefUecMO1Dzwh'\n            fetch(songkickEventsUrl)\n              .then(response => response.json())\n              .then(data => {\n                console.log(data);\n                console.log(data.resultsPage.results.event);\n                return data.resultsPage.results.event;\n              })\n              .then(data => {\n                const eventsQueried = data.map(x => x.id);\n                  //TODO: Add more things here\n                  /*\n                  let obj ={};\n                  obj['eventName'] = x.eventName;\n                  //obj[uri] = x.uri;\n                  obj['venue'] = x.venue.displayName;\n                  obj['artists'] = x.performance.map(y => y.displayName); \n                  x.id\n                */\n                //console.log(eventsQueried);\n                this.setState({\n                  events: eventsQueried\n                })\n              })\n              .catch(error => {\n                console.log(error);\n              });\n              \n              \n          });\n        /*this.setState({\n          events: result\n        });*/\n      });\n  }\n\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onZipChange(e.target.value);\n  }\n\n  \n  // below I added a link back to the landing page, just to make our lives easier while testing\n  // we'll remove it when we actually build the events page, since users won't need to go back to\n  // the landing page\n  render() {\n    const thisZip = this.props.zip;\n    const { events } = this.state;\n    return (\n      <div>\n        <EventCard eventsData={events} />\n        <div className=\"eventsPage\">Zip entered was: {thisZip}</div>\n        \n        <div>\n          <ul>\n            <li>\n              <NavLink to=\"/\">Home</NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}