{"ast":null,"code":"var _jsxFileName = \"/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Events.js\";\n\n/* page for loading events on bootstrap cards */\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport EventCard from \"./EventCard\";\n\nclass Events extends React.Component {\n  componentWillMount() {\n    const googleUrl = 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + this.props.zip + '&key=AIzaSyBNWms-eVzSQmo6leT8Re4yBrpmC9tx-h0';\n    fetch(googleUrl).then(result => result.json()).then(result => {\n      console.log(result);\n      return result.results;\n    }).then(data => {\n      const lat = data[0].geometry.location.lat;\n      const long = data[0].gemotry.location.lat;\n      console.log(lat);\n      console.log(long);\n    });\n    const songkickAreaUrl = 'https://api.songkick.com/api/3.0/search/locations.json?location=geo:45.52,-122.93&apikey=nD4GefUecMO1Dzwh'; //TODO:Need to actually grab location info from result\n\n    fetch(songkickAreaUrl).then(result => result.json()).then(result => {\n      console.log(result); //TODO: Actual grab area id from result, specify dates?\n\n      const songkickEventsUrl = 'https://api.songkick.com/api/3.0/metro_areas/12283/calendar.json?apikey=nD4GefUecMO1Dzwh';\n      fetch(songkickEventsUrl).then(response => response.json()).then(data => {\n        console.log(data);\n        console.log(data.resultsPage.results.event);\n        return data.resultsPage.results.event;\n      }).then(data => {\n        const eventsQueried = data.map(x => {\n          let obj = {};\n          obj['EventName'] = x.displayName;\n          obj[\"Uri\"] = x.uri;\n          obj[\"Venue\"] = x.venue.displayName;\n          obj[\"StartDate\"] = x.start.date;\n          return obj;\n        });\n        console.log(eventsQueried);\n        return eventsQueried;\n      }).then(results => {\n        this.setState({\n          events: results\n        });\n      }) //TODO: Add more things here\n\n      /*\n      let obj ={};\n      obj['eventName'] = x.eventName;\n      //obj[uri] = x.uri;\n      obj['venue'] = x.venue.displayName;\n      obj['artists'] = x.performance.map(y => y.displayName); \n      x.id\n      */\n      //console.log(eventsQueried);\n      .catch(error => {\n        console.log(error);\n      });\n    });\n    /*this.setState({\n      events: result\n    });*/\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onZipChange(e.target.value);\n  } // below I added a link back to the landing page, just to make our lives easier while testing\n  // we'll remove it when we actually build the events page, since users won't need to go back to\n  // the landing page\n\n\n  render() {\n    const thisZip = this.props.zip;\n    const {\n      events\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(EventCard, {\n      eventsData: events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"eventsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Zip entered was: \", thisZip), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Home\")))));\n  }\n\n}\n\nexport default Events;","map":{"version":3,"sources":["/home/alicja/Documents/FrontEndProject/gigue/Gigue/src/routes/Events.js"],"names":["React","NavLink","EventCard","Events","Component","componentWillMount","googleUrl","props","zip","fetch","then","result","json","console","log","results","data","lat","geometry","location","long","gemotry","songkickAreaUrl","songkickEventsUrl","response","resultsPage","event","eventsQueried","map","x","obj","displayName","uri","venue","start","date","setState","events","catch","error","constructor","state","handleChange","bind","e","onZipChange","target","value","render","thisZip"],"mappings":"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","sourcesContent":["/* page for loading events on bootstrap cards */\n\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport EventCard from \"./EventCard\";\n\nclass Events extends React.Component {\n  state = {\n    events: []\n  };\n\n  componentWillMount() {\n    const googleUrl = 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + this.props.zip + '&key=AIzaSyBNWms-eVzSQmo6leT8Re4yBrpmC9tx-h0'\n    fetch(googleUrl)\n      .then(result => result.json())\n      .then(result => {\n        console.log(result);\n        return result.results;\n      })\n      .then(data => {\n        const lat = data[0].geometry.location.lat;\n        const long = data[0].gemotry.location.lat;\n        console.log(lat);\n        console.log(long);\n      })\n        const songkickAreaUrl = 'https://api.songkick.com/api/3.0/search/locations.json?location=geo:45.52,-122.93&apikey=nD4GefUecMO1Dzwh'\n        //TODO:Need to actually grab location info from result\n        fetch(songkickAreaUrl)\n          .then(result => result.json())\n          .then(result =>{\n            console.log(result);\n            //TODO: Actual grab area id from result, specify dates?\n            const songkickEventsUrl = 'https://api.songkick.com/api/3.0/metro_areas/12283/calendar.json?apikey=nD4GefUecMO1Dzwh'\n            fetch(songkickEventsUrl)\n              .then(response => response.json())\n              .then(data => {\n                console.log(data);\n                console.log(data.resultsPage.results.event);\n                return data.resultsPage.results.event;\n              })\n              .then(data => {\n                const eventsQueried = data.map(x => {\n                  let obj = {};\n                  obj['EventName'] = x.displayName;\n                  obj[\"Uri\"] = x.uri;\n                  obj[\"Venue\"] = x.venue.displayName;\n                  obj[\"StartDate\"] = x.start.date;\n                  \n                  return obj;\n                \n                });\n                console.log(eventsQueried);\n                return eventsQueried;\n              })\n              .then(results => {\n                this.setState({\n                  events: results\n                })\n              })\n                  //TODO: Add more things here\n                  /*\n                  let obj ={};\n                  obj['eventName'] = x.eventName;\n                  //obj[uri] = x.uri;\n                  obj['venue'] = x.venue.displayName;\n                  obj['artists'] = x.performance.map(y => y.displayName); \n                  x.id\n                */\n                //console.log(eventsQueried);\n              \n              \n              .catch(error => {\n                console.log(error);\n              });\n              \n              \n          });\n        /*this.setState({\n          events: result\n        });*/\n      \n  }\n\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onZipChange(e.target.value);\n  }\n\n  \n  // below I added a link back to the landing page, just to make our lives easier while testing\n  // we'll remove it when we actually build the events page, since users won't need to go back to\n  // the landing page\n  render() {\n    const thisZip = this.props.zip;\n    const { events } = this.state;\n    return (\n      <div>\n        <EventCard eventsData={events} />\n        <div className=\"eventsPage\">Zip entered was: {thisZip}</div>\n        \n        <div>\n          <ul>\n            <li>\n              <NavLink to=\"/\">Home</NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}